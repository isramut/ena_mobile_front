import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:ena_mobile_front/main.dart' as app;
import 'package:ena_mobile_front/services/auth_api_service.dart';
import 'package:ena_mobile_front/models/user_model.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('Test d\'int√©gration utilisateur r√©el', () {
    testWidgets('Test complet du flux candidature avec utilisateur r√©el', (WidgetTester tester) async {
      // Lancer l'application
      app.main();
      await tester.pumpAndSettle();

      // Donn√©es utilisateur r√©el pour les tests
      const String testEmail = 'aksamputu7@gmail.com';
      const String testPassword = 'Aks@2005';

      print('üéØ D√©but du test d\'int√©gration avec utilisateur r√©el');

      // √âtape 1: Attendre le splash screen et naviguer vers le login
      print('üì± Attente du splash screen...');
      await tester.pumpAndSettle(const Duration(seconds: 6));

      // Chercher les champs de connexion
      final emailField = find.byKey(const Key('email_field'));
      final passwordField = find.byKey(const Key('password_field'));
      final loginButton = find.byKey(const Key('login_button'));

      if (emailField.evaluate().isEmpty) {
        // Si pas de champs de login, chercher le bouton "Se connecter"
        final connectButton = find.text('Se connecter');
        if (connectButton.evaluate().isNotEmpty) {
          await tester.tap(connectButton);
          await tester.pumpAndSettle();
        }
      }

      // √âtape 2: Connexion utilisateur
      print('üîê Tentative de connexion...');
      
      // Saisir l'email
      if (find.byKey(const Key('email_field')).evaluate().isNotEmpty) {
        await tester.enterText(find.byKey(const Key('email_field')), testEmail);
      } else if (find.byType(TextFormField).evaluate().isNotEmpty) {
        // Fallback: utiliser le premier champ texte trouv√©
        await tester.enterText(find.byType(TextFormField).first, testEmail);
      }

      await tester.pumpAndSettle();

      // Saisir le mot de passe
      if (find.byKey(const Key('password_field')).evaluate().isNotEmpty) {
        await tester.enterText(find.byKey(const Key('password_field')), testPassword);
      } else if (find.byType(TextFormField).evaluate().length > 1) {
        // Fallback: utiliser le deuxi√®me champ texte trouv√©
        await tester.enterText(find.byType(TextFormField).at(1), testPassword);
      }

      await tester.pumpAndSettle();

      // Cliquer sur le bouton de connexion
      if (find.byKey(const Key('login_button')).evaluate().isNotEmpty) {
        await tester.tap(find.byKey(const Key('login_button')));
      } else {
        // Fallback: chercher un bouton "Connexion" ou "Se connecter"
        final loginBtn = find.text('Connexion').first;
        if (loginBtn.evaluate().isNotEmpty) {
          await tester.tap(loginBtn);
        }
      }

      await tester.pumpAndSettle(const Duration(seconds: 3));

      print('‚úÖ Connexion effectu√©e');

      // √âtape 3: Naviguer vers la page candidature
      print('üìã Navigation vers la page candidature...');
      
      // Chercher le bouton "Candidater" ou "Postuler"
      final candidateButton = find.text('Candidater');
      if (candidateButton.evaluate().isNotEmpty) {
        await tester.tap(candidateButton.first);
        await tester.pumpAndSettle();
      } else {
        // Chercher dans la navigation ou les menus
        final menuButton = find.byIcon(Icons.menu);
        if (menuButton.evaluate().isNotEmpty) {
          await tester.tap(menuButton);
          await tester.pumpAndSettle();
          
          final candidateMenuItem = find.text('Candidature');
          if (candidateMenuItem.evaluate().isNotEmpty) {
            await tester.tap(candidateMenuItem);
            await tester.pumpAndSettle();
          }
        }
      }

      // √âtape 4: Tester le formulaire de candidature
      print('üìù Test du formulaire de candidature...');

      // V√©rifier que nous sommes sur la page candidature
      expect(find.text('Candidature').evaluate().isNotEmpty || 
             find.text('Informations personnelles').evaluate().isNotEmpty, 
             true, reason: 'Page candidature non trouv√©e');

      // Tester la validation du num√©ro de t√©l√©phone
      print('üìû Test validation num√©ro de t√©l√©phone...');
      
      final phoneField = find.byKey(const Key('phone_field'));
      if (phoneField.evaluate().isNotEmpty) {
        // Test avec num√©ro invalide
        await tester.enterText(phoneField, '123');
        await tester.pumpAndSettle();
        
        // Chercher le bouton de soumission
        final submitButton = find.text('Soumettre la candidature');
        if (submitButton.evaluate().isNotEmpty) {
          await tester.tap(submitButton);
          await tester.pumpAndSettle();
          
          // V√©rifier qu'un message d'erreur appara√Æt
          expect(find.text('Format de t√©l√©phone invalide').evaluate().isNotEmpty ||
                 find.text('Num√©ro de t√©l√©phone invalide').evaluate().isNotEmpty,
                 true, reason: 'Validation du t√©l√©phone ne fonctionne pas');
        }

        // Test avec num√©ro valide
        await tester.enterText(phoneField, '06 12 34 56 78');
        await tester.pumpAndSettle();
      }

      // √âtape 5: Test de l'upload de photo
      print('üì∏ Test upload photo de profil...');
      
      final photoButton = find.byKey(const Key('photo_upload_button'));
      if (photoButton.evaluate().isNotEmpty) {
        // Simuler le tap sur le bouton photo (sans vraiment uploader)
        await tester.tap(photoButton);
        await tester.pumpAndSettle();
        
        // V√©rifier que le s√©lecteur de source appara√Æt
        expect(find.text('Choisir une source').evaluate().isNotEmpty ||
               find.text('Galerie').evaluate().isNotEmpty ||
               find.text('Appareil photo').evaluate().isNotEmpty,
               true, reason: 'S√©lecteur de photo ne s\'ouvre pas');
        
        // Fermer le s√©lecteur
        await tester.tapAt(const Offset(100, 100));
        await tester.pumpAndSettle();
      }

      // √âtape 6: Test API de soumission (sans vraiment soumettre)
      print('üåê Test API candidature...');
      
      try {
        // Test de l'API service
        final authService = AuthApiService();
        
        // V√©rifier que le service est configur√©
        expect(authService, isNotNull, reason: 'AuthApiService non initialis√©');
        
        print('‚úÖ Service API configur√© correctement');
        
        // Test de r√©cup√©ration du profil utilisateur
        try {
          final userProfile = await authService.getUserProfile();
          if (userProfile != null) {
            print('üë§ Profil utilisateur r√©cup√©r√©: ${userProfile.email}');
            
            // V√©rifier que la photo est pr√©sente dans le cache apr√®s connexion
            if (userProfile.photo != null && userProfile.photo!.isNotEmpty) {
              print('üì∏ Photo utilisateur pr√©sente dans le profil');
            } else {
              print('‚ö†Ô∏è Aucune photo dans le profil utilisateur');
            }
          }
        } catch (e) {
          print('‚ö†Ô∏è Erreur r√©cup√©ration profil: $e');
        }
        
      } catch (e) {
        print('‚ùå Erreur test API: $e');
      }

      // √âtape 7: Test de l'avatar dans le header
      print('üë§ Test affichage avatar...');
      
      // Chercher l'avatar dans le header
      final avatarWidget = find.byKey(const Key('user_avatar'));
      if (avatarWidget.evaluate().isNotEmpty) {
        print('‚úÖ Avatar trouv√© dans le header');
        
        // V√©rifier que l'avatar est interactif
        await tester.tap(avatarWidget);
        await tester.pumpAndSettle();
        
        // V√©rifier si le menu profil s'ouvre
        if (find.text('Profil').evaluate().isNotEmpty ||
            find.text('Mon profil').evaluate().isNotEmpty) {
          print('‚úÖ Menu profil accessible depuis l\'avatar');
          
          // Fermer le menu
          await tester.tapAt(const Offset(100, 100));
          await tester.pumpAndSettle();
        }
      } else {
        print('‚ö†Ô∏è Avatar non trouv√© dans le header');
      }

      // √âtape 8: Navigation de retour
      print('üîô Test navigation retour...');
      
      final backButton = find.byIcon(Icons.arrow_back);
      if (backButton.evaluate().isNotEmpty) {
        await tester.tap(backButton);
        await tester.pumpAndSettle();
        print('‚úÖ Navigation retour fonctionnelle');
      }

      // √âtape 9: Test de d√©connexion
      print('üö™ Test d√©connexion...');
      
      // Chercher le bouton de d√©connexion
      final logoutButton = find.text('D√©connexion');
      if (logoutButton.evaluate().isNotEmpty) {
        await tester.tap(logoutButton);
        await tester.pumpAndSettle();
        
        // V√©rifier qu'on revient √† l'√©cran de connexion
        expect(find.text('Connexion').evaluate().isNotEmpty ||
               find.text('Se connecter').evaluate().isNotEmpty,
               true, reason: 'D√©connexion ne fonctionne pas');
        
        print('‚úÖ D√©connexion fonctionnelle');
      }

      print('üéâ Test d\'int√©gration termin√© avec succ√®s !');
    });

    testWidgets('Test isolation - V√©rification des services', (WidgetTester tester) async {
      print('üîß Test des services isol√©s...');
      
      // Test AuthApiService
      final authService = AuthApiService();
      expect(authService, isNotNull);
      
      // Test initialisation des services critiques
      try {
        // Ces tests ne n√©cessitent pas d'interface utilisateur
        print('‚úÖ Services initialis√©s correctement');
      } catch (e) {
        print('‚ùå Erreur initialisation services: $e');
        fail('Services non initialis√©s: $e');
      }
    });

    testWidgets('Test responsive - Diff√©rentes tailles d\'√©cran', (WidgetTester tester) async {
      print('üì± Test responsive...');
      
      // Test avec petite taille d'√©cran
      await tester.binding.setSurfaceSize(const Size(360, 640));
      app.main();
      await tester.pumpAndSettle();
      
      print('‚úÖ Test petite taille d\'√©cran OK');
      
      // Test avec grande taille d'√©cran
      await tester.binding.setSurfaceSize(const Size(800, 1200));
      await tester.pumpAndSettle();
      
      print('‚úÖ Test grande taille d\'√©cran OK');
      
      // Remettre la taille par d√©faut
      await tester.binding.setSurfaceSize(null);
    });
  });
}
